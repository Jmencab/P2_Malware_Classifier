import feature_funs as ft
import os
import csv
import util

# writes csv files for feature functions given a test and train directory
# needs files feature_funs.py and ngram.py

# set training directory and test directory
DIR = "train15"
DIRR = "test15"

""" This is all feature functions that I've written so far, found in features.py

The second argument in the tuple gives the number of features to be extracted for
the specific function - if it's zero, then the function is not run.

Gram2_vals means 2-grams etc, gram2_vals refers to bigrams for tabs,
gram2_vals_b refers to bigrams for bytes, and _c refers to interpunctuation.

I already ran the first 5 functions, so we should only feed the last 8 into Odyssey.
Just delete the ( - #) from the last 8 functions and run this file.

"""

FUNCTIONS = [(ft.byte_size_vals, 1 - 1),
						 (ft.gram1_vals,     64 - 64),
						 (ft.gram2_vals,     128 - 128),
						 (ft.gram3_vals,     256 - 256),
						 (ft.gram4_vals,     512 - 512),
						 (ft.gram1_vals_b,   64 - 64),
						 (ft.gram2_vals_b,   128),
						 (ft.gram3_vals_b,   256 - 256),
						 (ft.gram4_vals_b,   512 - 512),
						 (ft.gram1_vals_c,   64 - 64),
						 (ft.gram2_vals_c,   128),
						 (ft.gram3_vals_c,   256 - 256),
						 (ft.gram4_vals_c,   512 - 512)]

# Don't change anything below this line
# ---------------------------------------------------------------------------

def main ():

	funs = [fun for fun in FUNCTIONS if fun[1] > 0]

	for fun in funs:

		fun, size = fun[0], fun[1]
		with open (fun.__name__ + DIR + '.csv', 'w') as f, \
				 open (fun.__name__ + DIRR + '.csv', 'w') as g:
				# initialize writers
				writerf = csv.writer(f, lineterminator='\n')
				writerg = csv.writer(g, lineterminator='\n')
				# write header
				writerf.writerow(["Id", "Class"] + list(range(size)))
				writerg.writerow(["Id", "Class"] + list(range(size)))
				# write all rows for training data
				for datafile in os.listdir(DIR):
					# get id and class
					id_str, clazz = datafile.split('.')[:2]
					clazz = util.malware_classes.index(clazz)
					row = [id_str] + [clazz] + fun(datafile, DIR, size)
					writerf.writerow(row)
				# write all rows for test data
				for datafile in os.listdir(DIRR):
					# get id and class
					id_str, clazz = datafile.split('.')[:2]
					clazz = -1
					row = [id_str] + [clazz] + fun(datafile, DIRR, size)
					writerg.writerow(row)

if __name__ == "__main__":
    main()
