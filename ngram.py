from pprint import pprint
from collections import Counter
from tqdm import tqdm
import os
import pandas as pd
import operator as op
import csv
import numpy as np
try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

DIREC = "train"
gram_dict = dict()
features = []

def file_grams (n, datafile, direc=DIREC, tags=True) :
  # convert file to tree
  tree = ET.parse(os.path.join(direc,datafile))
  # convert tree into tag list or byte list
  if tags == True:
    elList = []
    for el in tree.iter():
      elList.append(el.tag)
  else:
    bytestr = ET.tostring(tree.getroot(), encoding="UTF-8")
    elList = list(bytestr)
  # create list of all n_grams
  gram_list = zip(*[elList[i:] for i in range(n)])
  return gram_list

def add_feats (n, datafile, direc=DIREC):
  gram_list = file_grams (n, datafile)
  # create dictionary with n_grams and their values
  for el in gram_list:
    if el in gram_dict:
      gram_dict[el] += 1
    else:
      gram_dict[el] = 1

def find_feats (n, nfeats, direc=DIREC):
  for datafile in tqdm(os.listdir(direc)):
    add_feats (n, datafile)
  # pick most frequent keys as features
  features = dict(sorted(gram_dict.iteritems(), key=op.itemgetter(1), reverse=True)[:nfeats])
  return list(features.keys())

def file_vals (n, nbst, datafile, direc=DIREC) :
  global features
  if features == []:
    features = find_feats (n, nbst)
  gram_list = file_grams (n, datafile)
  vals = []
  for feat in features:
    vals.append(gram_list.count(feat))
  return vals
