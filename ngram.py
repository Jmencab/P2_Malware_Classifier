from tqdm import tqdm
import os
import operator as op
import csv
try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

features = dict()

def file_grams (n, datafile, direc, unit) :
  # convert file to tree
  tree = ET.parse(os.path.join(direc, datafile))
  # convert tree into tag list or byte list
  if unit == 'tags':
    elList = []
    for el in tree.iter():
      elList.append(el.tag)
  elif unit == 'bytes':
    bytestr = ET.tostring(tree.getroot(), encoding="UTF-8")
    elList = list(bytestr)
  else:
    elList = []
    chars = [' ','?','.',',',':',';','+','-','=','[','(','_','*','!','\\','/','\'']
    allstr = ET.tostring(tree.getroot(), encoding="ASCII")
    for el in allstr:
      if el in chars:
        elList.append(el)
  # create list of all n_grams
  gram_list = zip(*[elList[i:] for i in range(n)])
  return gram_list

def find_feats (n, nbst, unit):
  from writecsv import DIR as direc
  gram_dict = dict()
  # add all grams from all files
  for datafile in tqdm(os.listdir(direc)):
    gram_list = file_grams (n, datafile, direc, unit)
    # create dictionary with n_grams and their values
    for el in gram_list:
      if el in gram_dict:
        gram_dict[el] += 1
      else:
        gram_dict[el] = 1
  # pick most frequent keys as features
  all_feats = sorted(gram_dict, key=gram_dict.get, reverse=True)
  return all_feats[:nbst]

def file_vals (n, nbst, datafile, direc, unit) :
  global features
  if n not in features:
    features[n] = find_feats (n, nbst, unit)
  gram_list = file_grams (n, datafile, direc, unit)
  vals = []
  for feat in features[n]:
    vals.append(gram_list.count(feat))
  return vals
