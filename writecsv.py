import features
from tqdm import tqdm
import os
import csv
import util

# writes csv files for feature functions given a test and train directory
# needs files features.py and ngram.py

# this is the training directory and test directory
DIR = "train"
DIRR = "test"

# number of features to be extracted for each n-gram
# you can use any numbers as long as they are DISTINCT from each other
BST1, BST2, BST3, BST4 = 64, 128, 256, 512

# don't change this unless you're adding feature functions
NUMFUN = 5

def write_to_csv ():

	writer = []
	sizes = [["Size"], list(range(BST1)), list(range(BST2)), list(range(BST3)), list(range(BST4)) ]
	funs = [features.byte_size_vals, features.gram1_vals, features.gram2_vals,
					features.gram3_vals, features.gram4_vals]

	# open all files to write in
	with open ('bytesizetrain.csv', 'w') as s, \
	     open ('gram1train.csv', 'w') as g1, \
	     open ('gram2train.csv', 'w') as g2, \
	     open ('gram3train.csv', 'w') as g3, \
	     open ('gram4train.csv', 'w') as g4, \
	     open ('bytesizetest.csv', 'w') as sr, \
	     open ('gram1test.csv', 'w') as g1r, \
	     open ('gram2test.csv', 'w') as g2r, \
	     open ('gram3test.csv', 'w') as g3r, \
	     open ('gram4test.csv', 'w') as g4r:

	  # initialize a writer for each file
		for i in [s, g1, g2, g3, g4, sr, g1r, g2r, g3r, g4r]:
			writer.append(csv.writer(i, lineterminator='\n'))

		# write column headers
		for i in range(NUMFUN):
			writer[i].writerow(["Id", "Class"] + sizes[i])
			writer[i + NUMFUN].writerow(["Id", "Class"] + sizes[i])

		# write all rows for training data
		for datafile in tqdm(os.listdir(DIR)):
			# get id and class
			id_str, clazz = datafile.split('.')[:2]
			clazz = util.malware_classes.index(clazz)
			# write to each file
			for i in range(NUMFUN):
				row = [id_str] + [clazz] + funs[i](datafile, DIR)
				writer[i].writerow(row)

		# write all rows for test data
		for datafile in tqdm(os.listdir(DIRR)):
			# get id and class
			id_str, clazz = datafile.split('.')[:2]
			clazz = -1
			# write to each file
			for i in range(NUMFUN):
				row = [id_str] + [clazz] + funs[i](datafile, DIRR)
				writer[i + NUMFUN].writerow(row)

def main ():
	write_to_csv()

if __name__ == "__main__":
    main()
